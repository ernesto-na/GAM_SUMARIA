package xxgam.oracle.apps.fa.sumaria.inquiry.server;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;

import oracle.apps.fnd.framework.server.OADBTransaction;

import oracle.jbo.RowSetIterator;

import xxgam.oracle.apps.fa.sumaria.setup.server.XxGamSetupVORowImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class InquiryAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public InquiryAMImpl() {
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) {
        launchTester("xxgam.oracle.apps.fa.sumaria.inquiry.server", /* package name */
      "InquiryAMLocal" /* Configuration Name */);
    }
    
    /**
     * Metodo que actualiza la tabla de la operacion sumaria
     */
    
    public void updateRecord(String IdSetup,String myAux) {
        
            System.out.println("Actualizando Registro..."+IdSetup);
            //System.out.println(myAux);
             
             /* Java Programming */
             /* Obtener el Controlador (Driver) para conectarse a la base de datos */
             
             OADBTransaction oaDBTransaction =  this.getOADBTransaction();
             Connection connection = oaDBTransaction.getJdbcConnection();
             
             String strPrepStmt = " UPDATE XXGAM_SAF_SUMARIA_TBL SET XML_STRING=?, LAST_UPDATE_DATE=SYSDATE WHERE SAF_SUMARIA_ID=? ";
             
             PreparedStatement prepStmt;

             try {
               prepStmt = connection.prepareStatement(strPrepStmt);
               prepStmt.setString(1, myAux);
               prepStmt.setString(2, IdSetup);
               prepStmt.execute();
               System.out.println(strPrepStmt);
               oaDBTransaction.commit();
               if(prepStmt!=null){
                   prepStmt.close();
               }
               throw new OAException("Se actualizo exitosamente ",OAException.INFORMATION);
             } catch (SQLException e) {
                throw new OAException("No se actualizo el registro:",OAException.ERROR);
             }
        }       
        
        
    /**
     * Inserta en la tabla XXGAM_SAF_FLUJO_EFECTIVO
     */
     public void exec_insert(String uOp,String id_r,String rubro,String tipo_saldo,String periodo_inicial,String periodo_final,String R1_COST_INITIAL_BALANCE) {
         
               /* Java Programming */
               /* Obtener el Controlador (Driver) para conectarse a la base de datos */
             System.out.println("u_op: "+uOp+" id_r: "+id_r+" rubro: "+rubro+" tipo_saldo: "+tipo_saldo+" periodo_inicial: "+periodo_inicial+" periodo_final: "+periodo_final+" R1_COST_INITIAL_BALANCE: "+R1_COST_INITIAL_BALANCE);  
             
             
              /* OADBTransaction oaDBTransaction =  this.getOADBTransaction();
               Connection connection = oaDBTransaction.getJdbcConnection();
               
             String strPrepStmt = " INSERT INTO XX_INSERT_DEMO VALUES (XX_INSERT_DEMO_S.NEXTVAL,?,?,?,sysdate,99,sysdate,99,99)";
             
             PreparedStatement prepStmt;

             try {
                 prepStmt = connection.prepareStatement(strPrepStmt);
                 prepStmt.setString(1, column1);
                 prepStmt.setString(2, column2);
                 prepStmt.setString(3, column3);
                 prepStmt.execute();
                 System.out.println(strPrepStmt);
                 oaDBTransaction.commit();
                 if(prepStmt!=null){
                     prepStmt.close();
                 }
                 throw new OAException("Se inserta exitosamente "+column1+" "+column2+" "+column3,OAException.CONFIRMATION);
             } catch (SQLException e) {
                  throw new OAException("No se registra cambio para:"+column1+" "+column2+" "+column3,OAException.ERROR);
             }*/
         }

         
         
         
    /**Container's getter for XxGamSafOmTblVO1
     */
    public XxGamSafOmTblVOImpl getXxGamSafOmTblVO1() {
        return (XxGamSafOmTblVOImpl)findViewObject("XxGamSafOmTblVO1");
    }

  public XxGamSafOmTblVORowImpl findXxGamSafCurrrentRow(String strCurrentRow)
  {
    XxGamSafOmTblVOImpl SafOmTblVOImpl = getXxGamSafOmTblVO1(); 
    XxGamSafOmTblVORowImpl SafOmTblVORowImpl = null; 
    XxGamSafOmTblVORowImpl retval = null;
    
    oracle.jbo.domain.Number numCurrentRow = null;

    try
    {
      numCurrentRow = new oracle.jbo.domain.Number(strCurrentRow);
    } catch (SQLException e)
    {
     }
    RowSetIterator rowSetIterator = SafOmTblVOImpl.createRowSetIterator(null); 
    while(rowSetIterator.hasNext()){
      SafOmTblVORowImpl = (XxGamSafOmTblVORowImpl)rowSetIterator.next(); 
      if(numCurrentRow.equals(SafOmTblVORowImpl.getSafOmId())){
        retval = SafOmTblVORowImpl; 
        break; 
      }
    }
    
    return retval; 
    
  }
  
    public XxGamSafYtdeTblVORowImpl findXxGamSafYtdeCurrrentRow(String strCurrentRow)
    {
      XxGamSafYtdeTblVOImpl SafYtdeTblVOImpl = getXxGamSafYtdeTblVO1(); 
      XxGamSafYtdeTblVORowImpl SafYtdeTblVORowImpl = null; 
      XxGamSafYtdeTblVORowImpl retval = null;
      
      oracle.jbo.domain.Number numCurrentRow = null;

      try
      {
        numCurrentRow = new oracle.jbo.domain.Number(strCurrentRow);
      } catch (SQLException e)
      {
       }
      RowSetIterator rowSetIterator = SafYtdeTblVOImpl.createRowSetIterator(null); 
      while(rowSetIterator.hasNext()){
        SafYtdeTblVORowImpl = (XxGamSafYtdeTblVORowImpl)rowSetIterator.next(); 
        if(numCurrentRow.equals(SafYtdeTblVORowImpl.getSafYtdeId())){
          retval = SafYtdeTblVORowImpl; 
          break; 
        }
      }
      
      return retval; 
      
    }

    public XxGamSafSumariaTblVORowImpl findXxGamSafSumariaCurrrentRow(String strCurrentRow)
    {
      XxGamSafSumariaTblVOImpl SafSumariaTblVOImpl = getXxGamSafSumariaTblVO1(); 
      XxGamSafSumariaTblVORowImpl SafSumariaTblVORowImpl = null; 
      XxGamSafSumariaTblVORowImpl retval = null;
      
      oracle.jbo.domain.Number numCurrentRow = null;

      try
      {
        numCurrentRow = new oracle.jbo.domain.Number(strCurrentRow);
      } catch (SQLException e)
      {
       }
      RowSetIterator rowSetIterator = SafSumariaTblVOImpl.createRowSetIterator(null); 
      while(rowSetIterator.hasNext()){
        SafSumariaTblVORowImpl = (XxGamSafSumariaTblVORowImpl)rowSetIterator.next(); 
        if(numCurrentRow.equals(SafSumariaTblVORowImpl.getSafSumariaId())){
          retval = SafSumariaTblVORowImpl; 
          break; 
        }
      }
      
      return retval; 
      
    }



  /**Container's getter for XxGamSafYtdeTblVO1
   */
  public XxGamSafYtdeTblVOImpl getXxGamSafYtdeTblVO1()
  {
    return (XxGamSafYtdeTblVOImpl)findViewObject("XxGamSafYtdeTblVO1");
  }

    /**Container's getter for XxGamSafSumariaTblVO1
     */
    public XxGamSafSumariaTblVOImpl getXxGamSafSumariaTblVO1() {
        return (XxGamSafSumariaTblVOImpl)findViewObject("XxGamSafSumariaTblVO1");
    }

    /**
     * Metodo que recupera el registro sobre el cual se esta ejecutando el evento
     * de actualizar
     * @param strPsumariaId
     * @return
     */
    public XxGamSafSumariaTblVORowImpl filterSumariaVO(String strPsumariaId) {
        oracle.jbo.domain.Number strParamSumariaId=null;
        try {
            strParamSumariaId = new oracle.jbo.domain.Number(strPsumariaId);
        } catch (SQLException e) {
            // TODO
        }
        XxGamSafSumariaTblVORowImpl retVal = null;
        XxGamSafSumariaTblVOImpl sumariaVO = getXxGamSafSumariaTblVO1();
        RowSetIterator iterador = sumariaVO.createRowSetIterator(null); 
        while(iterador.hasNext()){
           retVal = (XxGamSafSumariaTblVORowImpl)iterador.next(); 
           oracle.jbo.domain.Number numSumariaId =retVal.getSafSumariaId();  
           if(strParamSumariaId.equals(numSumariaId)){
               break;
           }
           
        }
        return retVal;

    
    }
}
